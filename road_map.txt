@abstarct:
    This is a ToDo list which be used to create, edit and remove ToDos.
    A Todo is characterized by his identifiant, title, the date of creation, his status and the tasks to do.
    The status of Todo shows if the Todo is completed or not
    Todos may not have tasks and can have many tasks.
    Task also can be created, edited, removed and marked as done as a Todo

    Graphical interface (GTK+)
    Data will be saved in database (SQlite)


@PART 1: BACK END

    @@Database tables:

        # CREATE TABLE IF NOT EXISTS TODO(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title VARCHAR(100),
            desc VARCHAR(255),
            created_at INTEGER,
            modified_at INTEGER,
            ended_at INTEGER,
            status BOOLEAN
        );

        # CREATE TABLE IF NOT EXISTS TASK(
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            title VARCHAR(100),
            desc VARCHAR(255),
            todo_id INTEGER REFERENCES TODO(id),
            created_at INTEGER,
            modified_at INTEGER,
            ended_at INTEGER,
            status BOOLEAN,
        );

    @Database Functions
        #General Functions
            -[] Function that composes sql request. The sql request is a format
                string. For the format string %s and %d are supported.
                -@param{const char*}                SQL request format string
                static enum STATUS_CODE dbComposeRequest(const char*, ...);

            -[] Function that initializes database.
                -@return{enum STATUS_CODE}          STATUS_CODE
                static enum STATUS_CODE dbInit(void);

            -[] Function to open  database and creates it if it does not exist
                -@return{enum STATUS_CODE}          STATUS_CODE
                enum STATUS_CODE dbOpen(void);

            -[] Function to close database
                -@return{enum STATUS_CODE}          STATUS_CODE
                enum STATUS_CODE dbClose(void);

        #Todo Functions
            -[] Function to add a Todo
                -@param{Todo}               A Todo
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE dbAddTodo(const Todo);

            -[] Function to update a Todo
                -@param{Todo}               A Todo
                -@param{unsigned int}       update flag
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE dbUpdateTodo(const Todo, const unsigned int);

            -[] Function to delete a Todo
                -@param{unsigned int}       todo identifier
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE dbDeleteTodo(const unsigned int);

            -[] Function to select all Todos
                -@return{Todo*}     List of todos
                Todo* dbFetchAllTodos(void);

        #Tasks Functions
            -[] Function to add a Task
                -@param{Task}               A Task
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE dbAddTask(const Task);

            -[] Function to update a Task
                -@param{Task}               A Task
                -@param{unsigned int}       update flag
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE dbUpdateTask(const Task, const unsigned int);

            -[] Function to delete a Task
                -@param{unsigned int}       task identifier
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE dbDeleteTask(const unsigned int);

            -[] Function to delete all Todo's Tasks
                -@param{unsigned int}       todo identifier
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE dbDeleteAllTasks(const unsigned int);

            -[] Function to select all Todo's tasks
                -@param{unsigned int}   todo identifier
                -@return{Task *}        Tasks of a Todo
                Task* dbFetchAllTasks(const unsigned int);


    @@Structures:

        - Structure ToDo

            struct __todo{
                unsigned int    id;
                unsigned int    len;
                char            title[100];
                char            desc[255];
                time_t          created_at;
                time_t          modified_at;
                time_t          ended_at;
                unsigned short  status;
                Task            tasks[20];
            }
            typedef struct __todo* Todo;

        - Structure Task

            struct __task{
                unsigned int    id;
                char            title[100];
                char            desc[255];
                time_t          created_at;
                time_t          modified_at;
                time_t          ended_at;
                unsigned short  status;
            }
            typedef struct __task* Task;

        - Status code

            enum STATUS_CODE {
                ERR_MAX_TASK,
                ERR_MAX_TITLE,
                ERR_MAX_DESC,
                ERR_SQLR_MAX,
                ERR_TODO,
                ERR_UNKNOWN,
                TASK_ADDED,
                TASK_DELETED,
                TASK_UPDATED,
                TODO_ADDED,
                TODO_DESTROYED,
                TODO_UPDATED,
                SQLR_COMPOSED,
                DB_CLOSED,
                DB_INITIALIZED,
                DB_OPENED
            }

    @@Functionalities
        @Todo functions
            -[x] Function to initialize a Todo
                -@return{Todo}    An empty Todo
                Todo todoInit();

            -[x] Function to destroy a Todo in memory
                -@param{Todo}     A Todo
                -@return{enum STATUS_CODE}    STATUS_CODE
                enum STATUS_CODE todoDestroy(Todo);

            -[x] Function to delete a Todo
                -@param          A Todo
                -@return{enum STATUS_CODE}   STATUS_CODE
                enum STATUS_CODE todoDelete(Todo);

            -[x] Function to set a Todo title
                -@param{Todo}    A Todo
                -@param{const char*}   New title of the Todo
                -@return{enum STATUS_CODE}    STATUS_CODE
                enum STATUS_CODE todoSetTitle(Todo, const char*);

            -[x] Function to set a Todo description
                -@param{Todo}    A Todo
                -@param{const char*}   New description of the Todo
                -@return{enum  STATUS_CODE}     STATUS_CODE
                enum STATUS_CODE todoSetDesc(Todo, const char*);

            -[x] Function to set the creation date of a Todo
                -@param{Todo}   A Todo
                -@param{const time_t}   Creation date of the Todo
                -@return{enum STATUS_CODE}    STATUS_CODE
                enum STATUS_CODE todoSetCreatedAt(Todo, const time_t);

            -[x] Function to set the modification date of a Todo
                -@param{Todo}               A Todo
                -@param{const time_t}       modification date of the todo
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE todoSetModifiedAt(Todo, const time_t);

            -[x] Function to set the deadline a Todo
                -@param{Todo}       A Todo
                -@param{const time_t}     deadline of the Todo
                -@return{enum STATUS_CODE}      STATUS_CODE
                enum STATUS_CODE todoSetDeadline(Todo, const time_t);

            -[x] Function to set a Todo status
                -@param{Todo}   A Todo
                -@param{const int}    Status of the Todo (1 if it's completed 0 otherwise)
                -@return{enum STATUS_CODE}      STATUS_CODE
                enum STATUS_CODE todoSetStatus(Todo, const int);

            -[x] Function to set a Todo length
                -@param{Todo}               todo list
                -@param{cons unsigned int}  new length
                enum STATUS_CODE todoSetLength(Todo, const unsigned int);

            -[x] Function to add a Todo task
                -@param{Todo}     A Todo
                -@param{const Task}     Task
                -@return{enum STATUS_CODE}    STATUS_CODE
                enum STATUS_CODE void todoAddTask(Todo, const Task);

            -[x] Function to delete a Todo task
                -@param{Todo}       A Todo
                -@param{Task}       task to delete
                -@return{enum STATUS_CODE}      STATUS_CODE
                enum STATUS_CODE todoDeleteTask(Todo, Task);

        @Task functions
            -[x] Function to initialize a Task
                -@return{Task}    An empty Task
                Task taskInit();

            -[x] Function to destroy a Task in memory
                -@param{Task}                       A Task
                -@return{enum STATUS_CODE}          STATUS_CODE
                enum STATUS_CODE taskDestroy(Task);

            -[x] Function to delete a Task
                -@param          A Task
                -@return{enum STATUS_CODE}   STATUS_CODE
                enum STATUS_CODE taskDelete(Todo);

            -[x] Function to set a Task title
                -@param{Task}                               A Task
                -@param{const char*}                        Newtitle of the Task
                -@return{enum STATUS_CODE}                  STATUS_CODE
                enum STATUS_CODE taskSetTitle(Task, const char*);

            -[x] Function to set a Task description
                -@param{Task}                               A Task
                -@param{const char*}                        Newdescription of the Task
                -@return{enum  STATUS_CODE}                 STATUS_CODE
                enum STATUS_CODE taskSetDesc(Task, const char*);

            -[x] Function to set the creation date of a Task
                -@param{Task}               A Task
                -@param{const time_t}       Creation date of the task
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE taskSetCreatedAt(Task, const time_t);

            -[x] Function to set the modification date of a Task
                -@param{Task}               A Task
                -@param{const time_t}       modification date of the task
                -@return{enum STATUS_CODE}  STATUS_CODE
                enum STATUS_CODE taskSetModifiedAt(Task, const time_t);

            -[x] Function to set the deadline a Task
                -@param{Task}       A Task
                -@param{const time_t}     deadline of the Task
                -@return{enum STATUS_CODE}      STATUS_CODE
                enum STATUS_CODE taskSetDeadline(Task, const time_t);

            -[x] Function to set a Task status
                -@param{Task}   A Task
                -@param{const int}    Status of the Task (1 if it'scompleted 0 otherwise)
                -@return{enum STATUS_CODE}      STATUS_CODE
                enum STATUS_CODE todoSetStatus(Todo, const int);